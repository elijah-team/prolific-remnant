package tripleo.lomb;

public enum ILSourceRole {
	//!!
//	SrAbstractBlockScope,
//	SrAbstractExpression,
//	SrAbstractScope2,
//	SrAbstractStatementClosure,
//	SrAbstractTypeName,
//	SrAbstractTypeName2,

	SrAccessNotation,
	SrAliasStatement,
	SrAnnotationClause,
	SrAnnotationPart,
	SrAnnotationWalker,
	//SrAttached,
	//SrBaseFunctionDef,
	SrBasicBinaryExpression,
	SrBlockStatement,
	SrCharLitExpression,
	SrClassInheritance,
	SrClassItem,
	SrClassStatement,
	SrClassTypes,
	SrConstructStatement,
	SrConstructorDef,
	SrContext,
	////SrDecideElObjectType,
	SrDefFunctionDef,
	SrDestructorDef,
	//////SrDocumentable,
	SrDotExpression,
	////SrElObjectType,
	SrCategory, // EL_Category
	////SrExpressionBuilder,
	////SrExpressionKind,
	SrExpressionList,
	SrFloatExpression,
	SrFormalArgList,
	SrFormalArgListItem,
	SrFuncExpr,
	SrFuncTypeName,
	SrFunctionDef,
	SrFunctionItem,
	SrFunctionModifiers,
	SrGenericTypeName,
	SrGetItemExpression,
	//SrIBinaryExpression,
	//SrIExpression,
	SrIdentExpression,
	SrIdentList,
	SrIfConditional,
	SrIndexingItem,
	SrIndexingStatement,
	SrInvariantStatement,
	SrInvariantStatementPart,
	SrListExpression,
	SrLookupResult,
	SrLookupResultList,
	SrLoop,
	SrLoopTypes,
	SrMatchConditional,  // <<--
	////SrModuleItem,
	SrNameTable, // !
	SrNamespaceModify, // !
	SrNamespaceStatement,
	//SrNamespaceTypes,
	SrNormalTypeName,
	SrNumericExpression,
	//SrOS_Container,
	SrOS_Element,
	SrOS_Element2,
	//SrOS_Expression, // see ?
	SrOS_Module, // <
	SrOS_Package,
	//SrOS_Type,
	////SrParserClosure,
	SrPostcondition,
	SrPrecondition,
	SrProcedureCallExpression,
	SrProgramClosure,
	SrPropertyStatement,
	SrQualident,
	SrQualidentList,
	SrRegularTypeName,
	//SrResolvable,
	//SrScope,
	//SrScope3,
	SrSetItemExpression,
	SrStatementClosure, // !
	//SrStatementItem,
	SrStatementWrapper, // !
	SrStringExpression,
	SrSubExpression,
	SrSyntacticBlock,
	SrToExpression,
	SrTypeAliasStatement,
	SrTypeCastExpression,
	SrTypeCheckExpression,
	SrTypeModifiers,
	SrTypeName,
	SrTypeNameExpression,
	SrTypeNameList,
	SrTypeOfTypeName,
	SrVariableReference,
	SrVariableSequence,
	SrVariableStatement,
	SrVariableTypeName,
	SrWithStatement,
	SrYieldExpression,
	//Sr_CommonNC,

	//Srbuilder
	SrCaseConditional,
	//Srimports
	SrImportStatement,
	//Srtypes
	SrUnaryExpression;
}
